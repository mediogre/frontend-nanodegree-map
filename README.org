* "Architecture"
- RequireJS is used for "modularity"
- r.js is used for final optimized build
- GoogleMaps API presents a bit of a challenge to this idealized picture,
since it loads asynchronously and we must be user-friendly and handle the
situation where it fails to load properly. Most examples of using GoogleMaps API
with RequireJS prefer to sidestep this error handling and the consensus is to
either use async! plugin or its variants using promises.
Since one of the explicit requirement is proper (aka graceful) error handling,
I decided to handle GoogleMaps API loading before requirejs kicks in.
This way the majority of the app does not have to worry about this, essentially
once the apps loads it assumes that GoogleMaps API has been properly loaded,
and if not, the app is not even started, instead a simple error reporting is done on
the spot.

** Flow of control/events
1. Hard-dependencies (jquery, ko, google maps api) are loaded and any error are reported
2. app.js is "required".
3. It in turn:
   - initializes full-screen map
   - initializes ListViewModel
   - initializes GeopositionViewmodel
   - sets initial location (Moscow)
4. Each viewmodel makes sure to apply bindings to its own "view".

* References
- Idea of gluing modules came from this http://stackoverflow.com/a/28466452/404328
- jquery-growl (https://github.com/ksylvest/jquery-growl) - used for displaying error messages, warnings, etc

* App overview
At the moment this app allows to choose any location and browse nearby museums (although any type of place supported by Places API can be used).
Top-left input string controls the location and automatically populates list of matching geolocations.
Clicking on a location would change the map and nearby museums would appear represented by both markers on the map and items in the right-side list view.
Clicking on a marker or a list view extracts the relevant information about the place using other external APIs, namely:
- streetview image from Google Streeview API
- an image from FourSquare API for that location
- a wiki page search is done using Wikipedia GeoData API and then an extract of that page is requested
- an extract is then used for infowindow corresponding to the place

All APIs use jquery deferreds to hide "complexity" of particular data format, finish at their own pace and resolve with simplified result or reject with an error message.

Responsiveness is achieved by using relative sizes for list view, geoview and images. Rigid breakpoints based on media queries were not used,
instead listview "adapts" to the viewport using width based on EXes. In case if listview is larger than half of the screen (in EXes) and does not allow to interact with 
the map, it automatically hides itself when the item is selected to make room for the map, read infoview, etc. The user can return list view back by clicking on an "arrow" at any time.

A simple grunt-based building was also added for the obtaining the final result:
- r.js is used to generate a single js file containing all the modules and libs
- css files are concatenated and minified
Just running npm install (to get dev dependencies) and grunt will produce the final result in 'build/' directory.

