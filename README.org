* Requirements

* "Architecture"
- RequireJS is used for "modularity"
- r.js will be used for final optimized build
- GoogleMaps API presents a bit of a challenge to this idealized picture,
since it loads asynchronously and we must be user-friendly and handle the
situation where it fails to load properly. Most examples of using GoogleMaps API
with RequireJS prefer to sidestep this error handling and the consensus is to
either use async! plugin or its variants using promises.
Since one of the explicit requirement is proper (aka graceful) error handling,
I decided to handle GoogleMaps API loading before requirejs kicks in.
This way the majority of the app does not have to worry about this, essentially
once the apps loads it assumes that GoogleMaps API has been properly loaded,
and if not, the app is not even started, instead a simple error reporting is done on
the spot.

** Flow of control/events
1. Hard-dependencies (jquery, ko, google maps api) are loaded and any error are reported
2. app.js is "required".
3. It in turn:
   - initializes full-screen map
   - initializes PlacesViewModel
   - initializes GeopositionViewmodel
   - sets initial location (Moscow)
4. Each viewmodel makes sure to apply bindings to its own "view".


* References
- Idea of gluing modules came from this http://stackoverflow.com/a/28466452/404328
- jquery-growl (https://github.com/ksylvest/jquery-growl) - used for displaying error messages, warnings, etc

* TODO
  - [X] clear current museums even if places finds nothing - that is when we change location,
        we should start from empty museums list in all cases
  - [X] stop animations for existing marker(s), when selecting a museum
  - [X] click on marker and select list view item
  - [X] once list view item/marker is selected
    - [X] load a picture
    - load some info
      - wikipedia?
    - [X] load foursquare venue stuff


* Udacity Rubric
** How will I complete this Project?
   - [X] Review our course JavaScript Design Patterns.
   - [X] Download the Knockout framework.
   - [X] Write code required to add a full-screen map to your page using the Google Maps API.
   - [X] Write code required to add map markers identifying a number of locations your are interested in within this neighborhood.
   - [ ] Implement the search bar functionality to search and filter your map markers.
         There should be a filtering function on markers that already show up.
         Simply providing a search function through a third-party API is not enough.
   - [X] Implement a list view of the identified locations.
   - [X] Add additional functionality using third-party APIs
         when a map marker,
         search result,
         or list view entry is clicked (ex. Yelp reviews, Wikipedia, StreetView/Flickr images, etc).
         If you need a refresher on making AJAX requests to third-party servers, check out our Intro to AJAX course.

* Register for APIs
  - [X] foursquare

* TODO rough
  - create 3 images strip
    - wiki
    - streetview
    - foursquare

    - they should always show something - like "Loading" or "No image"
    - show errors?
    - show them vertically if device is "vertical"
    - show them horizontally if device is "horizontal"

  - introduce active museum
    - [X] activated by a click on marker
    - [X] activated by clicking list item as well

    - when active museum is selected:
      - previous active (if any) should lose activity
        - [X] no bouncing (if there was any)
        - [X] no "boldness"
	- its data should get lost
	  - [X] images disappear
	    - [X] streetview
	    - [X] foursquare
	    - [X] wikiimage
	  - wiki data should disappear as well
      - [X] marker must bounce on activation
      - [X] show this activity as "bold" font or something
      - streetview shows loading
      - foursquare shows loading
      - streetview shows loading
      - when loaded images appear
      - [X] if not loaded - brief "error" message appears in the corresponding divs
  - [X] hovering over a marker should make "active" the corresponding list item

  - make sure responsiveness is there
    - create breakpoints if needed?
      - show images (from APIs) vertically if portrait?
      - show images horizontally in landscape?
      - use different width per image depending on media query (mobile, tablet, xlarge - steal definitions from bootstrap?)

  - [X] finish filtering

  - [X] foursquare image

  - wikipedia data

  - selecting markers by keyboard would be slick?
    - assign 1, 2, 3, 4, 5 to first markers
      - shows those numbers in both markers and list view
      - numbers are to be affected by filtering and changes to places

      - numbers are assigned dynamically?
	- when filtered list is rebuilt

      - custom layering to draw "digits"?
